tree grammar TrunkSQLPipeline;

options
{
	language=CSharp3;
	tokenVocab=TrunkSQL;
	ASTLabelType=CommonTree;
}

scope
AttachDatabaseScope
{
	AttachDatabaseParameters request;
}

scope
AddTableScope
{
	AddFileGroupTableParameters request;
}

scope
BatchScope
{
	List<Task> tasks;
}

scope
UnitScope
{
	List<Task> tasks;
}

@treeparser::namespace { Zen.Trunk.Storage.Query }

@treeparser::header
{
	using System;
	using System.Globalization;
	using System.Threading.Tasks;
	using Zen.Trunk.Storage;
	using Zen.Trunk.Storage.Data;
	using Zen.Trunk.Storage.Data.Table;
}

// Parser - Root
public
compileUnit returns [Task task]
scope UnitScope;
@init
{
	$UnitScope::tasks = new List<Task>();
}
@after
{
	$task = ExecuteBatchesSequentially($UnitScope::tasks);
}
	:	statementBatch+
	;

statementBatch
scope BatchScope;
@init
{
	$BatchScope::tasks = new List<Task>();
}
@after
{
	$UnitScope::tasks.Add(TaskExtra.WhenAllOrEmpty($BatchScope::tasks.ToArray()));
}
	:	statement+ batchSeperator?
	;

batchSeperator
	:	'go' { $BatchScope::tasks.Add(ExecuteBatch()); }
	;

statement
	:	/*result1 = dmlStatement { $BatchScope::tasks.Add(result1); }
		| */result2=ddlStatement { $BatchScope::tasks.Add(result2); }
	;

// Parser - DML
/*dmlStatement
	:
	;*/

// Parser - DDL
ddlStatement returns [Task task]
	:	result1=createDatabaseStmt { task = result1; }
	|	result2=createTableStmt { task = result2; }
	|	result3=useDatabaseStmt { task = result3; }
	;

createDatabaseStmt returns [Task task]
scope AttachDatabaseScope;
@init
{
	$AttachDatabaseScope::request = new AttachDatabaseParameters();
}
	:	^(CREATEDATABASESTMT ID fileGroupSpec logFileSpec? attachMode=attachOption)
		{
			$AttachDatabaseScope::request.Name = $ID.Text;
			$AttachDatabaseScope::request.IsCreate = attachMode;
			$task = QueueDDLTask($AttachDatabaseScope::request);
		}
	;

fileGroupSpec
	:	primaryFileGroupSpec secondaryFileGroupSpec*
	;

primaryFileGroupSpec
	:	^(PRIMARYFILEGROUP (file=fileSpec { $AttachDatabaseScope::request.AddDataFile("PRIMARY", file); } )+)
	;

secondaryFileGroupSpec
	:	^(SECONDARYFILEGROUP ID (file=fileSpec { $AttachDatabaseScope::request.AddDataFile($ID.Text, file); } )+)
	;

logFileSpec
	:	^(LOGFILEGROUP (file=fileSpec { $AttachDatabaseScope::request.AddLogFile(file); } )+)
	;

attachOption returns [bool isCreate]
	:	(FORATTACHOF)	{ $isCreate = false; }
	|					{ $isCreate = true; }
	;

fileSpec returns [FileSpec fs]
	:	^(FILESPEC logicalNamePart=fileSpecLogicalNamePart pathNamePart=fileSpecFilenamePart sizePart=fileSpecSizePart? maxSizePart=fileSpecMaxSizePart? growthPart=fileSpecGrowthPart?)
		{
			$fs = new FileSpec
			{
				Name = logicalNamePart,
				FileName = pathNamePart,
				Size = sizePart,
				MaxSize= maxSizePart,
				ByteGrowth = (growthPart != null) ? $growthPart.fileGrowthBytes : null,
				PercentGrowth = (growthPart != null) ? $growthPart.fileGrowthPercent : null
			};
		}
	;

fileSpecLogicalNamePart returns [string logicalName]
	:	^(LOGICALNAME ID) { $logicalName = $ID.Text; }
	;

fileSpecFilenamePart returns [string pathName]
	:	^(FILENAME NonEscapedStringLiteral) { $pathName = StripStringWrapper($NonEscapedStringLiteral.Text); }
	;

fileSpecSizePart returns [long fileSize]
	:	^(FILESIZE value=integerLiteral units=fixedSizeDesignator) { $fileSize=value*units; }
	;

fileSpecMaxSizePart returns [long maxFileSize]
	:	^(MAXFILESIZE (value=integerLiteral units=fixedSizeDesignator)?) { $maxFileSize=value*units; }
	;

fileSpecGrowthPart returns [long? fileGrowthBytes, double? fileGrowthPercent]
	:	^(FIXEDFILEGROWTH intValue=integerLiteral units=fixedSizeDesignator) { $fileGrowthBytes=intValue*units; }
	|	^(PERCENTFILEGROWTH floatValue=floatingPointLiteral) { $fileGrowthPercent=floatValue; }
	;

fixedSizeDesignator returns [long multiplier]
	:	('kb') { $multiplier = (long)(1024L); }
	|	('mb') { $multiplier = (long)(1024L*1024L); }
	|	('gb') { $multiplier = (long)(1024L*1024L*1024L); }
	|	('tb') { $multiplier = (long)(1024L*1024L*1024L*1024L); }
	;

createTableStmt returns [Task task]
scope AddTableScope;
@init
{
	$AddTableScope::request = new AddFileGroupTableParameters();
}
@after
{
	$task = QueueDMLTask($AddTableScope::request);
}
	:	createPermanentTableStmt | createTemporaryTableStmt
	;

createPermanentTableStmt
	:	^(CREATETABLESTMT ID tableColumnDefinitionList onFileGroup)
		{
			$AddTableScope::request.TableName = $ID.Text;
		}
	;

onFileGroup
	:	^(FILEGROUP group=StringLiteral?)
		{
			if(group != null)
			{
				$AddTableScope::request.FileGroupName = group.Text;
			}
			else
			{
				$AddTableScope::request.FileGroupName = "PRIMARY";
			}
		}
	;

createTemporaryTableStmt
	:	^(CREATETEMPTABLESTMT TEMPID tableColumnDefinitionList)
		{
			$AddTableScope::request.TableName = $TEMPID.Text;
		}
	;

tableColumnDefinitionList
	:	^(TABLECOLUMNDEFINITION tableColumnDefinition+)
	;

columnDefinition returns [string columnName, TableColumnDataType columnType, ushort? columnSize]
	:	^(DATATYPE columnNameArg=ID typeNameArg=ID size=integerLiteral) { $columnName = columnNameArg.Text; $columnType = ConvertToTableColumnType(typeNameArg.Text); $columnSize = (ushort)size; }
	|	^(DATATYPE columnNameArg=ID typeNameArg=ID) { $columnName = columnNameArg.Text; $columnType = ConvertToTableColumnType(typeNameArg.Text); $columnSize = null; }
	;

tableColumnDefinition
	:	^(COLUMNDEFINITION def=columnDefinition nullable=nullableSpec ident=identitySpec?)
		{
			TableColumnInfo column = 
				new TableColumnInfo($def.columnName, $def.columnType, nullable);
			if($def.columnSize != null)
			{
				column.Length = $def.columnSize.Value;
			}
			if(ident != null)
			{
				column.AutoIncrement = true;
				column.IncrementSeed = $ident.seed;
				column.IncrementAmount = $ident.increment;
			}
			$AddTableScope::request.Columns.Add(column);
		}
	;

nullableSpec returns [bool isNullable]
	:	^(NULLABLE value=booleanLiteral) { $isNullable = value; }
	;

identitySpec returns [uint seed, uint increment]
	:	^(IDENTITY spec=(seedValue=integerLiteral incrementValue=integerLiteral)?)
		{
			if(spec == null)
			{
				$seed = $increment = 1;
			}
			else
			{
				$seed = (uint)seedValue;
				$increment = (uint)incrementValue;
			}
		}
	;

useDatabaseStmt returns [Task task]
	:	^(USEDATABASESTMT ID)
		{
			// TODO: Setup current database
			// CurrentDatabase = DatabaseManager.GetDatabaseByName($ID.Text);
			$task = CompletedTask.Default;
		}
	;

literal 
	:   integerLiteral
	|   floatingPointLiteral
	|   CharacterLiteral
	|   StringLiteral
	|   booleanLiteral
	|   'null'
	;

integerLiteral returns [long value]
	:   HexLiteral { $value=Int64.Parse($HexLiteral.Text, NumberStyles.HexNumber); }
	|   DecimalLiteral { $value=Int64.Parse($DecimalLiteral.Text, NumberStyles.None); }
	;

floatingPointLiteral returns [double value]
	:	FloatingPointLiteral { $value=double.Parse($FloatingPointLiteral.Text, NumberStyles.Float); }
	;

booleanLiteral returns [bool value]
	:   'true' { $value = true; }
	|   'false' { $value = false; }
	;
